with balance_extract AS ( SELECT * FROM  dbt_osjl.FSCMTOPMODELAM_FINEXTRACTAM_GLBICCEXTRACTAM_BALANCEEXTRACTPVO ),
ledger_extract AS ( SELECT * FROM  {{ref('CT_GL_LEDGERS_D_STG')}}),
fiscalperiod_extract AS ( SELECT * FROM  {{ref('CT_GL_PERIODS_D_STG')}}),
dailyrate_extract AS ( SELECT * FROM  {{ref('CT_GL_DAILY_RATES_D_STG')}}),
CT_GL_BALANCES_F_STG AS (
SELECT
  CAST(COALESCE(CAST(BALANCE.BALANCELEDGERID AS INT64), 0) AS INT64) AS LEDGER_ID,
  --COALESCE(BALANCE.GLCC_ID, '0') AS GLCC_ID,
  'NULL' AS GLCC_ID,
  --CONCAT(COALESCE(BALANCE.BALANCEPERIODNAME, '0'), '~', COALESCE(FISCAL.PERIOD_SET_NAME, '0')) AS PERIOD_ID,
  --COALESCE(CAST(FORMAT_DATE('%Y%m%d', PARSE_DATE('%Y%m%d', CAST(FISCAL.PERIOD_DT_ID AS STRING))) AS INT64), 0) AS PERIOD_DT_ID,
  BALANCE.BALANCEPERIODNAME AS PERIOD_NAME,
  CAST(COALESCE(CAST(BALANCE.BALANCEPERIODYEAR AS INT64), 0) AS INT64) AS PERIOD_YEAR,
  CAST(COALESCE(CAST(BALANCE.BALANCEPERIODNUM AS INT64), 0) AS INT64) AS PERIOD_NUM,
  LEDGER.LEDGER_NAME AS LEDGER_NAME,
  'NULL' AS SEGMENT1,
  'NULL' AS SEGMENT2,
  'NULL' AS SEGMENT3,
  'NULL' AS SEGMENT4,
  'NULL' AS SEGMENT5,
  'NULL' AS SEGMENT6,
  'NULL' AS SEGMENT7,
  'NULL' AS SEGMENT8,
  'NULL' AS SEGMENT9,
  BALANCE.BALANCECURRENCYCODE AS CURRENCY_CODE,
  BALANCE.BALANCEACTUALFLAG AS ACTUAL_FLAG,
  CASE
    WHEN COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0) > COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0)
    THEN 'DB'
    ELSE 'CR'
  END AS DB_CR_IND,
  BALANCE.BALANCETRANSLATEDFLAG AS TRANSLATED_FLAG,
  'NULL' AS BUDGET_VERSION_ID,
  --CAST(BALANCE.BUDGET_VERSION_ID AS INT64) AS BUDGET_VERSION_ID,
  CAST(BALANCE.BALANCEENCUMBRANCETYPEID AS INT64) AS ENCUMBRANCE_TYPE_ID,
  CASE
    WHEN BALANCE.BALANCEACTUALFLAG = 'E' THEN 'Y'
    ELSE 'N'
  END AS ENCUMBRANCE_TYPE_NAME,
  CASE
    WHEN BALANCE.BALANCETRANSLATEDFLAG IS NULL THEN 'Y'
    ELSE 'N'
  END AS SUMMARY_ACCOUNT_FLAG,
  COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0) AS PERIOD_NET_DR,
  COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0) AS PERIOD_NET_CR,
  COALESCE(CAST(BALANCE.BALANCEBEGINBALANCEDR AS FLOAT64), 0) AS BEGIN_BALANCEBEGINBALANCEDR,
  COALESCE(CAST(BALANCE.BALANCEBEGINBALANCECR AS FLOAT64), 0) AS BEGIN_BALANCEBEGINBALANCECR,
  COALESCE(CAST(BALANCE.BALANCEBEGINBALANCECR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEBEGINBALANCEDR AS FLOAT64), 0) AS BEGIN_BALANCE,
  COALESCE(CAST(BALANCE.BALANCEBEGINBALANCECR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEBEGINBALANCEDR AS FLOAT64), 0) - (COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0)) AS END_BALANCE,
  COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0) AS PERIOD_ACTIVITY,
  COALESCE(CAST(BALANCE.BALANCEQUARTERTODATEDR AS FLOAT64), 0) AS QTR_TO_DATE_DR,
  COALESCE(CAST(BALANCE.BALANCEQUARTERTODATECR AS FLOAT64), 0) AS QTR_TO_DATE_CR,
  COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0) * COALESCE(CAST(DAILY.CONVERSION_RATE AS FLOAT64), 1) AS PERIOD_NET_DR_USD,
  COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0) * COALESCE(CAST(DAILY.CONVERSION_RATE AS FLOAT64), 1) AS PERIOD_NET_CR_USD,
  COALESCE((COALESCE(CAST(BALANCE.BALANCEBEGINBALANCECR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEBEGINBALANCEDR AS FLOAT64), 0)) * COALESCE(CAST(DAILY.CONVERSION_RATE AS FLOAT64), 1), 0) AS BEGIN_BALANCE_USD,
  COALESCE((COALESCE(CAST(BALANCE.BALANCEBEGINBALANCECR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEBEGINBALANCEDR AS FLOAT64), 0)) - (COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0) - COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0)) * COALESCE(CAST(DAILY.CONVERSION_RATE AS FLOAT64), 1), 0) AS END_BALANCE_USD,
  COALESCE(DAILY.CONVERSION_RATE, 1) AS CONV_RATE_TO_USD,
  COALESCE(DAILY.CONVERSION_TYPE, 'Corporate') AS CONV_RATE_TYPE,
  'NULL' AS ATTRIBUTE1,
  'NULL' AS ATTRIBUTE2,
  'NULL' AS ATTRIBUTE3,
  'NULL' AS ATTRIBUTE4,
  'NULL' AS ATTRIBUTE5,
  'NULL' AS ATTRIBUTE6,
  'NULL' AS ATTRIBUTE7,
  'NULL' AS ATTRIBUTE8,
  'NULL' AS ATTRIBUTE9,
  'NULL' AS ATTRIBUTE10,
  CAST(FISCAL.CREATION_DT AS DATE) AS CREATION_DT,
  CAST(BALANCE.BALANCELASTUPDATEDATE AS DATE) AS LAST_UPDATE_DT,
  FISCAL.CREATED_BY AS CREATED_BY,
  BALANCE.BALANCELASTUPDATEDBY AS LAST_UPDATED_BY,
  COALESCE(
    CONCAT(COALESCE(BALANCE.BALANCELEDGERID, '0'), '~',
    --COALESCE(BALANCE.GLCC_ID, '0'),'~',  
    COALESCE(BALANCE.BALANCEPERIODNAME, 'NULL'), '~',
      CASE WHEN COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0) > COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0)
      THEN 'DB' ELSE 'CR' END,
      '~', COALESCE(BALANCE.BALANCEACTUALFLAG, 'NULL'), '~', COALESCE(BALANCE.BALANCETRANSLATEDFLAG, 'X'), '~', COALESCE(BALANCE.BALANCECURRENCYCODE, 'NULL')--, '~', COALESCE(CAST(BALANCE.BUDGET_VERSION_ID AS STRING), '0')
    ), '0'
  ) AS INTEGRATION_ID,
  /*COALESCE(
    CONCAT(COALESCE(BALANCE.BALANCELEDGERID, '0'), '~', COALESCE(BALANCE.GLCC_ID, '0'), '~', COALESCE(BALANCE.BALANCEPERIODNAME, 'NULL'), '~',
      CASE WHEN COALESCE(CAST(BALANCE.BALANCEPERIODNETDR AS FLOAT64), 0) > COALESCE(CAST(BALANCE.BALANCEPERIODNETCR AS FLOAT64), 0)
      THEN 'DB' ELSE 'CR' END,
      '~', COALESCE(BALANCE.BALANCEACTUALFLAG, 'NULL'), '~', COALESCE(BALANCE.BALANCETRANSLATEDFLAG, 'X'), '~', COALESCE(BALANCE.BALANCECURRENCYCODE, 'NULL')--, '~', COALESCE(CAST(BALANCE.BUDGET_VERSION_ID AS STRING), '0')
    ), '0'
  ) AS INTEGRATION_ID,
   */ 1000 AS DATASOURCE_NUM_ID,
  'Y' AS ACTIVE_FLAG,
  'N' AS DELETE_FLAG
FROM
  balance_extract AS BALANCE
  LEFT JOIN ledger_extract AS LEDGER ON LEDGER.LEDGER_ID = BALANCE.BALANCELEDGERID
  LEFT JOIN fiscalperiod_extract AS FISCAL ON (FISCAL.PERIOD_NAME = BALANCE.BALANCEPERIODNAME) --AND FISCAL.PERIOD_SET_NAME = PERIOD.PERIOD_SET_NAME)
  --INNER JOIN fiscalperiod_extract AS FISCAL ON (FISCAL.PERIOD_NAME = BALANCE.BALANCEPERIODNAME AND FISCAL.PERIOD_SET_NAME = PERIOD.PERIOD_SET_NAME)
  LEFT JOIN dailyrate_extract AS DAILY ON (DAILY.FROM_CURRENCY = BALANCE.BALANCECURRENCYCODE --AND PARSE_DATE('%Y%m%d', CAST(DAILY.CONVERSION_DT AS STRING)) = PARSE_DATE('%Y%m%d', CAST(FISCAL.PERIOD_DT_ID AS STRING))
  AND DAILY.TO_CURRENCY = 'USD' AND DAILY.CONVERSION_TYPE = 'Corporate')
  --LEFT JOIN dailyrate_extract AS DAILY ON (DAILY.FROM_CURRENCY = BALANCE.BALANCECURRENCYCODE AND PARSE_DATE('%Y%m%d', CAST(DAILY.CONVERSION_DT AS STRING)) = PARSE_DATE('%Y%m%d', CAST(FISCAL.PERIOD_DT_ID AS STRING)) AND DAILY.TO_CURRENCY = 'USD' AND DAILY.CONVERSION_TYPE = 'Corporate')
  )
  SELECT * FROM CT_GL_BALANCES_F_STG